// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SocialApp.Models;

#nullable disable

namespace SocialApp.Migrations
{
    [DbContext(typeof(SocialMediaDbContext))]
    [Migration("20250728154451_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SocialApp.Models.ChatConversation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsUser1Active")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUser2Active")
                        .HasColumnType("boolean");

                    b.Property<string>("LastMessage")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int?>("LastMessageSenderId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LastMessageTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("MessageCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("User1Id")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("User1LastRead")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("User2Id")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("User2LastRead")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("LastMessageSenderId");

                    b.HasIndex("User2Id");

                    b.HasIndex(new[] { "LastMessageTime" }, "IX_ChatConversations_LastMessageTime");

                    b.HasIndex(new[] { "User1Id", "User2Id" }, "IX_ChatConversations_User1Id_User2Id")
                        .IsUnique();

                    b.ToTable("ChatConversations");
                });

            modelBuilder.Entity("SocialApp.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("ParentCommentId")
                        .HasColumnType("integer");

                    b.Property<int>("PostId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ParentCommentId" }, "IX_Comments_ParentCommentId");

                    b.HasIndex(new[] { "PostId" }, "IX_Comments_PostId");

                    b.HasIndex(new[] { "UserId" }, "IX_Comments_UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("SocialApp.Models.CommentReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CommentId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<int>("ReporterId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ResolvedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValue("Pending");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CommentId" }, "IX_CommentReports_CommentId");

                    b.HasIndex(new[] { "ReporterId" }, "IX_CommentReports_ReporterId");

                    b.ToTable("CommentReports");
                });

            modelBuilder.Entity("SocialApp.Models.EmailVerificationCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("EmailVerificationCodes");
                });

            modelBuilder.Entity("SocialApp.Models.MessageReaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("MessageId")
                        .HasColumnType("integer");

                    b.Property<string>("ReactionType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("like");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "MessageId" }, "IX_MessageReactions_MessageId");

                    b.HasIndex(new[] { "MessageId", "UserId" }, "IX_MessageReactions_MessageId_UserId")
                        .IsUnique();

                    b.HasIndex(new[] { "UserId" }, "IX_MessageReactions_UserId");

                    b.ToTable("MessageReactions");
                });

            modelBuilder.Entity("SocialApp.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CommentId")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("FromUserId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<int?>("PostId")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CommentId" }, "IX_Notifications_CommentId");

                    b.HasIndex(new[] { "FromUserId" }, "IX_Notifications_FromUserId");

                    b.HasIndex(new[] { "PostId" }, "IX_Notifications_PostId");

                    b.HasIndex(new[] { "UserId" }, "IX_Notifications_UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("SocialApp.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<int>("PrivacyLevel")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_Posts_UserId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("SocialApp.Models.PostMedia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("Duration")
                        .HasColumnType("bigint");

                    b.Property<int?>("Height")
                        .HasColumnType("integer");

                    b.Property<long?>("MediaFileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("MediaFilename")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("MediaMimeType")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("MediaPublicId")
                        .HasColumnType("text");

                    b.Property<string>("MediaType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("MediaUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("integer");

                    b.Property<int>("PostId")
                        .HasColumnType("integer");

                    b.Property<int?>("Width")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "PostId" }, "IX_PostMedias_PostId");

                    b.ToTable("PostMedias");
                });

            modelBuilder.Entity("SocialApp.Models.Reaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("EntityId")
                        .HasColumnType("integer");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("PostId")
                        .HasColumnType("integer");

                    b.Property<string>("ReactionType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValue("like");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "PostId" }, "IX_Reactions_PostId");

                    b.HasIndex(new[] { "UserId" }, "IX_Reactions_UserId");

                    b.ToTable("Reactions");
                });

            modelBuilder.Entity("SocialApp.Models.SimpleMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("ConversationId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<long?>("MediaFileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("MediaFilename")
                        .HasColumnType("text");

                    b.Property<string>("MediaMimeType")
                        .HasColumnType("text");

                    b.Property<string>("MediaPublicId")
                        .HasColumnType("text");

                    b.Property<string>("MediaType")
                        .HasColumnType("text");

                    b.Property<string>("MediaUrl")
                        .HasColumnType("text");

                    b.Property<int>("MessageType")
                        .HasColumnType("integer");

                    b.Property<int?>("ReplyToMessageId")
                        .HasColumnType("integer");

                    b.Property<int>("SenderId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ReplyToMessageId");

                    b.HasIndex(new[] { "ConversationId" }, "IX_SimpleMessages_ConversationId");

                    b.HasIndex(new[] { "ConversationId", "SentAt" }, "IX_SimpleMessages_ConversationId_SentAt");

                    b.HasIndex(new[] { "SenderId" }, "IX_SimpleMessages_SenderId");

                    b.HasIndex(new[] { "SentAt" }, "IX_SimpleMessages_SentAt");

                    b.ToTable("SimpleMessages");
                });

            modelBuilder.Entity("SocialApp.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Bio")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastActive")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValue("User");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Email" }, "IX_Users_Email")
                        .IsUnique();

                    b.HasIndex(new[] { "Username" }, "IX_Users_Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SocialApp.Models.UserBlock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BlockedUserId")
                        .HasColumnType("integer");

                    b.Property<int>("BlockerId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Reason")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "BlockedUserId" }, "IX_UserBlocks_BlockedUserId");

                    b.HasIndex(new[] { "BlockerId" }, "IX_UserBlocks_BlockerId");

                    b.HasIndex(new[] { "BlockerId", "BlockedUserId" }, "IX_UserBlocks_BlockerId_BlockedUserId")
                        .IsUnique();

                    b.ToTable("UserBlocks");
                });

            modelBuilder.Entity("SocialApp.Models.UserFollower", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("FollowerId")
                        .HasColumnType("integer");

                    b.Property<int>("FollowingId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "FollowerId" }, "IX_UserFollowers_FollowerId");

                    b.HasIndex(new[] { "FollowingId" }, "IX_UserFollowers_FollowingId");

                    b.ToTable("UserFollowers");
                });

            modelBuilder.Entity("SocialApp.Models.ChatConversation", b =>
                {
                    b.HasOne("SocialApp.Models.User", "LastMessageSender")
                        .WithMany()
                        .HasForeignKey("LastMessageSenderId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SocialApp.Models.User", "User1")
                        .WithMany()
                        .HasForeignKey("User1Id")
                        .IsRequired();

                    b.HasOne("SocialApp.Models.User", "User2")
                        .WithMany()
                        .HasForeignKey("User2Id")
                        .IsRequired();

                    b.Navigation("LastMessageSender");

                    b.Navigation("User1");

                    b.Navigation("User2");
                });

            modelBuilder.Entity("SocialApp.Models.Comment", b =>
                {
                    b.HasOne("SocialApp.Models.Comment", "ParentComment")
                        .WithMany("InverseParentComment")
                        .HasForeignKey("ParentCommentId");

                    b.HasOne("SocialApp.Models.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialApp.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("ParentComment");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SocialApp.Models.CommentReport", b =>
                {
                    b.HasOne("SocialApp.Models.Comment", "Comment")
                        .WithMany("CommentReports")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialApp.Models.User", "Reporter")
                        .WithMany("CommentReports")
                        .HasForeignKey("ReporterId")
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("Reporter");
                });

            modelBuilder.Entity("SocialApp.Models.MessageReaction", b =>
                {
                    b.HasOne("SocialApp.Models.SimpleMessage", "Message")
                        .WithMany("Reactions")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialApp.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("Message");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SocialApp.Models.Notification", b =>
                {
                    b.HasOne("SocialApp.Models.Comment", "Comment")
                        .WithMany("Notifications")
                        .HasForeignKey("CommentId");

                    b.HasOne("SocialApp.Models.User", "FromUser")
                        .WithMany("NotificationFromUsers")
                        .HasForeignKey("FromUserId");

                    b.HasOne("SocialApp.Models.Post", "Post")
                        .WithMany("Notifications")
                        .HasForeignKey("PostId");

                    b.HasOne("SocialApp.Models.User", "User")
                        .WithMany("NotificationUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("FromUser");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SocialApp.Models.Post", b =>
                {
                    b.HasOne("SocialApp.Models.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SocialApp.Models.PostMedia", b =>
                {
                    b.HasOne("SocialApp.Models.Post", "Post")
                        .WithMany("MediaFiles")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("SocialApp.Models.Reaction", b =>
                {
                    b.HasOne("SocialApp.Models.Post", "Post")
                        .WithMany("Reactions")
                        .HasForeignKey("PostId");

                    b.HasOne("SocialApp.Models.User", "User")
                        .WithMany("Reactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SocialApp.Models.SimpleMessage", b =>
                {
                    b.HasOne("SocialApp.Models.ChatConversation", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialApp.Models.SimpleMessage", "ReplyToMessage")
                        .WithMany()
                        .HasForeignKey("ReplyToMessageId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SocialApp.Models.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .IsRequired();

                    b.Navigation("Conversation");

                    b.Navigation("ReplyToMessage");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("SocialApp.Models.UserBlock", b =>
                {
                    b.HasOne("SocialApp.Models.User", "BlockedUser")
                        .WithMany("UserBlockBlockedUsers")
                        .HasForeignKey("BlockedUserId")
                        .IsRequired();

                    b.HasOne("SocialApp.Models.User", "Blocker")
                        .WithMany("UserBlockBlockers")
                        .HasForeignKey("BlockerId")
                        .IsRequired();

                    b.Navigation("BlockedUser");

                    b.Navigation("Blocker");
                });

            modelBuilder.Entity("SocialApp.Models.UserFollower", b =>
                {
                    b.HasOne("SocialApp.Models.User", "Follower")
                        .WithMany("UserFollowerFollowers")
                        .HasForeignKey("FollowerId")
                        .IsRequired();

                    b.HasOne("SocialApp.Models.User", "Following")
                        .WithMany("UserFollowerFollowings")
                        .HasForeignKey("FollowingId")
                        .IsRequired();

                    b.Navigation("Follower");

                    b.Navigation("Following");
                });

            modelBuilder.Entity("SocialApp.Models.ChatConversation", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("SocialApp.Models.Comment", b =>
                {
                    b.Navigation("CommentReports");

                    b.Navigation("InverseParentComment");

                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("SocialApp.Models.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("MediaFiles");

                    b.Navigation("Notifications");

                    b.Navigation("Reactions");
                });

            modelBuilder.Entity("SocialApp.Models.SimpleMessage", b =>
                {
                    b.Navigation("Reactions");
                });

            modelBuilder.Entity("SocialApp.Models.User", b =>
                {
                    b.Navigation("CommentReports");

                    b.Navigation("Comments");

                    b.Navigation("NotificationFromUsers");

                    b.Navigation("NotificationUsers");

                    b.Navigation("Posts");

                    b.Navigation("Reactions");

                    b.Navigation("UserBlockBlockedUsers");

                    b.Navigation("UserBlockBlockers");

                    b.Navigation("UserFollowerFollowers");

                    b.Navigation("UserFollowerFollowings");
                });
#pragma warning restore 612, 618
        }
    }
}
